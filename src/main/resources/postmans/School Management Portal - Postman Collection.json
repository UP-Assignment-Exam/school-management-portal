{
  "info": {
    "name": "School Management Portal API",
    "description": "Complete API collection for School Management Portal with authentication and file upload endpoints",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "sessionId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "noauth"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "GET Login Page",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Get the login page HTML"
          },
          "response": []
        },
        {
          "name": "POST Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Extract session cookie if login successful",
                  "if (pm.response.code === 302) {",
                  "    const cookies = pm.response.headers.get('Set-Cookie');",
                  "    if (cookies) {",
                  "        const sessionMatch = cookies.match(/JSESSIONID=([^;]+)/);",
                  "        if (sessionMatch) {",
                  "            pm.collectionVariables.set('sessionId', sessionMatch[1]);",
                  "            console.log('Session ID saved:', sessionMatch[1]);",
                  "        }",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "admin",
                  "description": "Default: admin"
                },
                {
                  "key": "password",
                  "value": "admin123",
                  "description": "Default: admin123"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            },
            "description": "Login with credentials. Default users:\n- admin/admin123 (ADMIN)\n- teacher1/teacher123 (TEACHER)\n- student1/student123 (STUDENT)"
          },
          "response": []
        },
        {
          "name": "GET Register Page",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/register",
              "host": ["{{baseUrl}}"],
              "path": ["register"]
            },
            "description": "Get the registration page (currently static)"
          },
          "response": []
        },
        {
          "name": "GET Dashboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "JSESSIONID={{sessionId}}",
                "description": "Session cookie for authentication"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["dashboard"]
            },
            "description": "Access dashboard (requires authentication)"
          },
          "response": []
        },
        {
          "name": "POST Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Cookie",
                "value": "JSESSIONID={{sessionId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/logout",
              "host": ["{{baseUrl}}"],
              "path": ["logout"]
            },
            "description": "Logout current user session"
          },
          "response": []
        }
      ],
      "description": "Authentication related endpoints"
    },
    {
      "name": "File Upload API",
      "item": [
        {
          "name": "POST Upload File",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Cookie",
                "value": "JSESSIONID={{sessionId}}",
                "description": "Session cookie for authentication"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "",
                  "description": "Select a file to upload (PDF, DOC, IMG, etc.)"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "upload"]
            },
            "description": "Upload a file to the server. Returns JSON response with status and filename."
          },
          "response": [
            {
              "name": "Successful Upload",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": "example.pdf"
                    }
                  ]
                },
                "url": {
                  "raw": "{{baseUrl}}/api/upload",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "upload"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"filename\": \"12345678-9abc-def0-1234-567890abcdef.pdf\",\n    \"originalFilename\": \"example.pdf\",\n    \"size\": \"1048576\"\n}"
            },
            {
              "name": "Empty File Error",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "type": "file",
                      "src": ""
                    }
                  ]
                },
                "url": {
                  "raw": "{{baseUrl}}/api/upload",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "upload"]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"error\",\n    \"message\": \"Please select a file to upload\"\n}"
            }
          ]
        },
        {
          "name": "GET Upload Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/upload/test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "upload", "test"]
            },
            "description": "Test endpoint to verify upload API is working"
          },
          "response": [
            {
              "name": "Upload Test Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/api/upload/test",
                  "host": ["{{baseUrl}}"],
                  "path": ["api", "upload", "test"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"success\",\n    \"message\": \"Upload endpoint is working\",\n    \"uploadDir\": \"uploads/\"\n}"
            }
          ]
        }
      ],
      "description": "File upload related endpoints"
    },
    {
      "name": "User Management API",
      "item": [
        {
          "name": "GET User by Username",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "JSESSIONID={{sessionId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/users/admin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "admin"]
            },
            "description": "Get user details by username (you'll need to create this endpoint)"
          },
          "response": []
        },
        {
          "name": "POST Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "JSESSIONID={{sessionId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"newuser\",\n    \"password\": \"password123\",\n    \"role\": \"STUDENT\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users"]
            },
            "description": "Create a new user (you'll need to create this endpoint)"
          },
          "response": []
        }
      ],
      "description": "User management endpoints (to be implemented)"
    },
    {
      "name": "Testing & Health Check",
      "item": [
        {
          "name": "GET Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/health",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "health"]
            },
            "description": "Spring Boot Actuator health check (if enabled)"
          },
          "response": []
        },
        {
          "name": "GET Application Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/actuator/info",
              "host": ["{{baseUrl}}"],
              "path": ["actuator", "info"]
            },
            "description": "Application information (if actuator is enabled)"
          },
          "response": []
        },
        {
          "name": "GET Test Database Connection",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Cookie",
                "value": "JSESSIONID={{sessionId}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/test/db",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "db"]
            },
            "description": "Test database connectivity (you'll need to create this endpoint)"
          },
          "response": []
        }
      ],
      "description": "Testing and monitoring endpoints"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "console.log('Response status:', pm.response.code);",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}